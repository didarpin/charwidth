// Copyright (c) 2025 didarpin
// SPDX-License-Identifier: MIT

#pragma once

#include <stdbool.h>
#include <stdint.h>
#include <uchar.h>

typedef uint32_t cw_u32;
typedef char32_t cw_c32;

typedef struct CW_Node {
	cw_c32 low;
	cw_c32 high;
} CW_Node;

static CW_Node const CW_kWidth1[{{ width1 | length }}] = {
	{% for n in width1 %}
	{{ "{" }}{{ "0x%x" | format(n[0]) }}, {{ "0x%x" | format(n[1]) }}{{ "}" }},
	{% endfor %}
};

static CW_Node const CW_kWidth2[{{ width2 | length }}] = {
	{% for n in width2 %}
	{{ "{" }}{{ "0x%x" | format(n[0]) }}, {{ "0x%x" | format(n[1]) }}{{ "}" }},
	{% endfor %}
};

static inline bool CW_IsInRanges(CW_Node const* ranges, cw_u32 size, cw_c32 c) {
	cw_u32 low = 0;
	cw_u32 high = size;
	cw_u32 mid;
	if (c < ranges[0].low) return false;
	if (c > ranges[size - 1].high) return false;
	while (1) {
		mid = ((high - low) / 2) + low;
		if ((c >= ranges[mid].low) && (c <= ranges[mid].high)) return true;
		if (mid == low) return false;
		if (c < ranges[mid].low) high = mid;
		else low = mid;
	}
	return false;
}

static inline cw_u32 CW_CharWidth(cw_c32 c) {
	if (CW_IsInRanges(CW_kWidth1, {{ width1 | length }}, c)) return 1;
	if (CW_IsInRanges(CW_kWidth2, {{ width2 | length }}, c)) return 2;
	return 0;
}
