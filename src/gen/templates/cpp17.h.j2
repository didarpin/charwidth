// Copyright (c) 2025 didarpin
// SPDX-License-Identifier: MIT

#pragma once

#include <algorithm>

namespace charwidth {

using c32 = char32_t;

}

namespace charwidth::details {

struct Node {
	c32 low;
	c32 high;
};

inline constexpr Node kWidth1[{{ width1 | length }}] = {
	{% for n in width1 %}
	{{ "{" }}{{ "0x%x" | format(n[0]) }}, {{ "0x%x" | format(n[1]) }}{{ "}" }},
	{% endfor %}
};

inline constexpr Node kWidth2[{{ width2 | length }}] = {
	{% for n in width2 %}
	{{ "{" }}{{ "0x%x" | format(n[0]) }}, {{ "0x%x" | format(n[1]) }}{{ "}" }},
	{% endfor %}
};

inline bool IsInRanges(Node const* ranges, size_t size, c32 c) {
	auto iter = std::lower_bound(ranges, ranges + size, c, [](Node const& v, c32 c) { return v.high < c; });
	return (iter != (ranges + size)) && (c >= iter->low);
}

}

namespace charwidth {

inline int CharWidth(c32 c) {
	if (details::IsInRanges(details::kWidth1, {{ width1 | length }}, c)) return 1;
	if (details::IsInRanges(details::kWidth2, {{ width2 | length }}, c)) return 2;
	return 0;
}

}
