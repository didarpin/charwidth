/*
	Copyright (c) 2025 didarpin
	SPDX-License-Identifier: MIT
*/

#pragma once

void CW_EnsureIntSize4(void) {
	static char var[sizeof(int) == 4 ? 1 : -1];
	(void)var;
}

typedef unsigned int cw_u32;
typedef unsigned int cw_c32;

typedef struct CW_Node {
	cw_c32 low;
	cw_c32 high;
} CW_Node;

static CW_Node const cw_kWidth1[{{ width1 | length }}] = {
	{% for n in width1 %}
	{{ "{" }}{{ "0x%x" | format(n[0]) }}, {{ "0x%x" | format(n[1]) }}{{ "}" }},
	{% endfor %}
};

static CW_Node const cw_kWidth2[{{ width2 | length }}] = {
	{% for n in width2 %}
	{{ "{" }}{{ "0x%x" | format(n[0]) }}, {{ "0x%x" | format(n[1]) }}{{ "}" }},
	{% endfor %}
};

static int CW_IsInRanges(CW_Node const* ranges, size_t size, cw_c32 c) {
	size_t low = 0;
	size_t high = size;
	size_t mid;
	if (c < ranges[0].low) return 0;
	if (c > ranges[size - 1].high) return 0;
	while (1) {
		mid = ((high - low) / 2) + low;
		if ((c >= ranges[mid].low) && (c <= ranges[mid].high)) return 1;
		if (mid == low) return 0;
		if (c < ranges[mid].low) high = mid;
		else low = mid;
	}
	return 0;
}

static int CW_CharWidth(cw_c32 c) {
	if (CW_IsInRanges(cw_kWidth1, {{ width1 | length }}, c)) return 1;
	if (CW_IsInRanges(cw_kWidth2, {{ width2 | length }}, c)) return 2;
	return 0;
}
