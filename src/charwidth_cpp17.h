// Copyright (c) 2025 didarpin
// SPDX-License-Identifier: MIT

#pragma once

#include <algorithm>
#include <array>
#include <cstdint>

namespace charwidth {

using c32 = char32_t;
using u32 = uint32_t;

}

namespace charwidth::details {

struct Node {
	c32 low;
	c32 high;
};

inline constexpr std::array<Node, 808> kWidth1 = {
	Node{0x20, 0x7e},
	Node{0xa0, 0x377},
	Node{0x37a, 0x37f},
	Node{0x384, 0x38a},
	Node{0x38c, 0x38c},
	Node{0x38e, 0x3a1},
	Node{0x3a3, 0x482},
	Node{0x48a, 0x52f},
	Node{0x531, 0x556},
	Node{0x559, 0x58a},
	Node{0x58d, 0x58f},
	Node{0x5be, 0x5be},
	Node{0x5c0, 0x5c0},
	Node{0x5c3, 0x5c3},
	Node{0x5c6, 0x5c6},
	Node{0x5d0, 0x5ea},
	Node{0x5ef, 0x5f4},
	Node{0x606, 0x60f},
	Node{0x61b, 0x61b},
	Node{0x61d, 0x64a},
	Node{0x660, 0x66f},
	Node{0x671, 0x6d5},
	Node{0x6de, 0x6de},
	Node{0x6e5, 0x6e6},
	Node{0x6e9, 0x6e9},
	Node{0x6ee, 0x70d},
	Node{0x710, 0x710},
	Node{0x712, 0x72f},
	Node{0x74d, 0x7a5},
	Node{0x7b1, 0x7b1},
	Node{0x7c0, 0x7ea},
	Node{0x7f4, 0x7fa},
	Node{0x7fe, 0x815},
	Node{0x81a, 0x81a},
	Node{0x824, 0x824},
	Node{0x828, 0x828},
	Node{0x830, 0x83e},
	Node{0x840, 0x858},
	Node{0x85e, 0x85e},
	Node{0x860, 0x86a},
	Node{0x870, 0x88f},
	Node{0x8a0, 0x8c9},
	Node{0x904, 0x939},
	Node{0x93d, 0x93d},
	Node{0x950, 0x950},
	Node{0x958, 0x961},
	Node{0x964, 0x980},
	Node{0x985, 0x98c},
	Node{0x98f, 0x990},
	Node{0x993, 0x9a8},
	Node{0x9aa, 0x9b0},
	Node{0x9b2, 0x9b2},
	Node{0x9b6, 0x9b9},
	Node{0x9bd, 0x9bd},
	Node{0x9ce, 0x9ce},
	Node{0x9dc, 0x9dd},
	Node{0x9df, 0x9e1},
	Node{0x9e6, 0x9fd},
	Node{0xa05, 0xa0a},
	Node{0xa0f, 0xa10},
	Node{0xa13, 0xa28},
	Node{0xa2a, 0xa30},
	Node{0xa32, 0xa33},
	Node{0xa35, 0xa36},
	Node{0xa38, 0xa39},
	Node{0xa59, 0xa5c},
	Node{0xa5e, 0xa5e},
	Node{0xa66, 0xa6f},
	Node{0xa72, 0xa74},
	Node{0xa76, 0xa76},
	Node{0xa85, 0xa8d},
	Node{0xa8f, 0xa91},
	Node{0xa93, 0xaa8},
	Node{0xaaa, 0xab0},
	Node{0xab2, 0xab3},
	Node{0xab5, 0xab9},
	Node{0xabd, 0xabd},
	Node{0xad0, 0xad0},
	Node{0xae0, 0xae1},
	Node{0xae6, 0xaf1},
	Node{0xaf9, 0xaf9},
	Node{0xb05, 0xb0c},
	Node{0xb0f, 0xb10},
	Node{0xb13, 0xb28},
	Node{0xb2a, 0xb30},
	Node{0xb32, 0xb33},
	Node{0xb35, 0xb39},
	Node{0xb3d, 0xb3d},
	Node{0xb5c, 0xb5d},
	Node{0xb5f, 0xb61},
	Node{0xb66, 0xb77},
	Node{0xb83, 0xb83},
	Node{0xb85, 0xb8a},
	Node{0xb8e, 0xb90},
	Node{0xb92, 0xb95},
	Node{0xb99, 0xb9a},
	Node{0xb9c, 0xb9c},
	Node{0xb9e, 0xb9f},
	Node{0xba3, 0xba4},
	Node{0xba8, 0xbaa},
	Node{0xbae, 0xbb9},
	Node{0xbd0, 0xbd0},
	Node{0xbe6, 0xbfa},
	Node{0xc05, 0xc0c},
	Node{0xc0e, 0xc10},
	Node{0xc12, 0xc28},
	Node{0xc2a, 0xc39},
	Node{0xc3d, 0xc3d},
	Node{0xc58, 0xc5a},
	Node{0xc5c, 0xc5d},
	Node{0xc60, 0xc61},
	Node{0xc66, 0xc6f},
	Node{0xc77, 0xc80},
	Node{0xc84, 0xc8c},
	Node{0xc8e, 0xc90},
	Node{0xc92, 0xca8},
	Node{0xcaa, 0xcb3},
	Node{0xcb5, 0xcb9},
	Node{0xcbd, 0xcbd},
	Node{0xcdc, 0xcde},
	Node{0xce0, 0xce1},
	Node{0xce6, 0xcef},
	Node{0xcf1, 0xcf2},
	Node{0xd04, 0xd0c},
	Node{0xd0e, 0xd10},
	Node{0xd12, 0xd3a},
	Node{0xd3d, 0xd3d},
	Node{0xd4e, 0xd4f},
	Node{0xd54, 0xd56},
	Node{0xd58, 0xd61},
	Node{0xd66, 0xd7f},
	Node{0xd85, 0xd96},
	Node{0xd9a, 0xdb1},
	Node{0xdb3, 0xdbb},
	Node{0xdbd, 0xdbd},
	Node{0xdc0, 0xdc6},
	Node{0xde6, 0xdef},
	Node{0xdf4, 0xdf4},
	Node{0xe01, 0xe30},
	Node{0xe32, 0xe33},
	Node{0xe3f, 0xe46},
	Node{0xe4f, 0xe5b},
	Node{0xe81, 0xe82},
	Node{0xe84, 0xe84},
	Node{0xe86, 0xe8a},
	Node{0xe8c, 0xea3},
	Node{0xea5, 0xea5},
	Node{0xea7, 0xeb0},
	Node{0xeb2, 0xeb3},
	Node{0xebd, 0xebd},
	Node{0xec0, 0xec4},
	Node{0xec6, 0xec6},
	Node{0xed0, 0xed9},
	Node{0xedc, 0xedf},
	Node{0xf00, 0xf17},
	Node{0xf1a, 0xf34},
	Node{0xf36, 0xf36},
	Node{0xf38, 0xf38},
	Node{0xf3a, 0xf3d},
	Node{0xf40, 0xf47},
	Node{0xf49, 0xf6c},
	Node{0xf85, 0xf85},
	Node{0xf88, 0xf8c},
	Node{0xfbe, 0xfc5},
	Node{0xfc7, 0xfcc},
	Node{0xfce, 0xfda},
	Node{0x1000, 0x102a},
	Node{0x103f, 0x1055},
	Node{0x105a, 0x105d},
	Node{0x1061, 0x1061},
	Node{0x1065, 0x1066},
	Node{0x106e, 0x1070},
	Node{0x1075, 0x1081},
	Node{0x108e, 0x108e},
	Node{0x1090, 0x1099},
	Node{0x109e, 0x10c5},
	Node{0x10c7, 0x10c7},
	Node{0x10cd, 0x10cd},
	Node{0x10d0, 0x10ff},
	Node{0x1200, 0x1248},
	Node{0x124a, 0x124d},
	Node{0x1250, 0x1256},
	Node{0x1258, 0x1258},
	Node{0x125a, 0x125d},
	Node{0x1260, 0x1288},
	Node{0x128a, 0x128d},
	Node{0x1290, 0x12b0},
	Node{0x12b2, 0x12b5},
	Node{0x12b8, 0x12be},
	Node{0x12c0, 0x12c0},
	Node{0x12c2, 0x12c5},
	Node{0x12c8, 0x12d6},
	Node{0x12d8, 0x1310},
	Node{0x1312, 0x1315},
	Node{0x1318, 0x135a},
	Node{0x1360, 0x137c},
	Node{0x1380, 0x1399},
	Node{0x13a0, 0x13f5},
	Node{0x13f8, 0x13fd},
	Node{0x1400, 0x169c},
	Node{0x16a0, 0x16f8},
	Node{0x1700, 0x1711},
	Node{0x171f, 0x1731},
	Node{0x1735, 0x1736},
	Node{0x1740, 0x1751},
	Node{0x1760, 0x176c},
	Node{0x176e, 0x1770},
	Node{0x1780, 0x17b3},
	Node{0x17d4, 0x17dc},
	Node{0x17e0, 0x17e9},
	Node{0x17f0, 0x17f9},
	Node{0x1800, 0x180a},
	Node{0x1810, 0x1819},
	Node{0x1820, 0x1878},
	Node{0x1880, 0x1884},
	Node{0x1887, 0x18a8},
	Node{0x18aa, 0x18aa},
	Node{0x18b0, 0x18f5},
	Node{0x1900, 0x191e},
	Node{0x1940, 0x1940},
	Node{0x1944, 0x196d},
	Node{0x1970, 0x1974},
	Node{0x1980, 0x19ab},
	Node{0x19b0, 0x19c9},
	Node{0x19d0, 0x19da},
	Node{0x19de, 0x1a16},
	Node{0x1a1e, 0x1a54},
	Node{0x1a80, 0x1a89},
	Node{0x1a90, 0x1a99},
	Node{0x1aa0, 0x1aad},
	Node{0x1b05, 0x1b33},
	Node{0x1b45, 0x1b4c},
	Node{0x1b4e, 0x1b6a},
	Node{0x1b74, 0x1b7f},
	Node{0x1b83, 0x1ba0},
	Node{0x1bae, 0x1be5},
	Node{0x1bfc, 0x1c23},
	Node{0x1c3b, 0x1c49},
	Node{0x1c4d, 0x1c8a},
	Node{0x1c90, 0x1cba},
	Node{0x1cbd, 0x1cc7},
	Node{0x1cd3, 0x1cd3},
	Node{0x1ce9, 0x1cec},
	Node{0x1cee, 0x1cf3},
	Node{0x1cf5, 0x1cf6},
	Node{0x1cfa, 0x1cfa},
	Node{0x1d00, 0x1dbf},
	Node{0x1e00, 0x1f15},
	Node{0x1f18, 0x1f1d},
	Node{0x1f20, 0x1f45},
	Node{0x1f48, 0x1f4d},
	Node{0x1f50, 0x1f57},
	Node{0x1f59, 0x1f59},
	Node{0x1f5b, 0x1f5b},
	Node{0x1f5d, 0x1f5d},
	Node{0x1f5f, 0x1f7d},
	Node{0x1f80, 0x1fb4},
	Node{0x1fb6, 0x1fc4},
	Node{0x1fc6, 0x1fd3},
	Node{0x1fd6, 0x1fdb},
	Node{0x1fdd, 0x1fef},
	Node{0x1ff2, 0x1ff4},
	Node{0x1ff6, 0x1ffe},
	Node{0x2000, 0x200a},
	Node{0x2010, 0x2027},
	Node{0x202f, 0x205f},
	Node{0x2070, 0x2071},
	Node{0x2074, 0x208e},
	Node{0x2090, 0x209c},
	Node{0x20a0, 0x20c1},
	Node{0x2100, 0x218b},
	Node{0x2190, 0x2319},
	Node{0x231c, 0x2328},
	Node{0x232b, 0x23e8},
	Node{0x23ed, 0x23ef},
	Node{0x23f1, 0x23f2},
	Node{0x23f4, 0x2429},
	Node{0x2440, 0x244a},
	Node{0x2460, 0x25fc},
	Node{0x25ff, 0x2613},
	Node{0x2616, 0x262f},
	Node{0x2638, 0x2647},
	Node{0x2654, 0x267e},
	Node{0x2680, 0x2689},
	Node{0x2690, 0x2692},
	Node{0x2694, 0x26a0},
	Node{0x26a2, 0x26a9},
	Node{0x26ac, 0x26bc},
	Node{0x26bf, 0x26c3},
	Node{0x26c6, 0x26cd},
	Node{0x26cf, 0x26d3},
	Node{0x26d5, 0x26e9},
	Node{0x26eb, 0x26f1},
	Node{0x26f4, 0x26f4},
	Node{0x26f6, 0x26f9},
	Node{0x26fb, 0x26fc},
	Node{0x26fe, 0x2704},
	Node{0x2706, 0x2709},
	Node{0x270c, 0x2727},
	Node{0x2729, 0x274b},
	Node{0x274d, 0x274d},
	Node{0x274f, 0x2752},
	Node{0x2756, 0x2756},
	Node{0x2758, 0x2794},
	Node{0x2798, 0x27af},
	Node{0x27b1, 0x27be},
	Node{0x27c0, 0x2b1a},
	Node{0x2b1d, 0x2b4f},
	Node{0x2b51, 0x2b54},
	Node{0x2b56, 0x2b73},
	Node{0x2b76, 0x2cee},
	Node{0x2cf2, 0x2cf3},
	Node{0x2cf9, 0x2d25},
	Node{0x2d27, 0x2d27},
	Node{0x2d2d, 0x2d2d},
	Node{0x2d30, 0x2d67},
	Node{0x2d6f, 0x2d70},
	Node{0x2d80, 0x2d96},
	Node{0x2da0, 0x2da6},
	Node{0x2da8, 0x2dae},
	Node{0x2db0, 0x2db6},
	Node{0x2db8, 0x2dbe},
	Node{0x2dc0, 0x2dc6},
	Node{0x2dc8, 0x2dce},
	Node{0x2dd0, 0x2dd6},
	Node{0x2dd8, 0x2dde},
	Node{0x2e00, 0x2e5d},
	Node{0x303f, 0x303f},
	Node{0x3248, 0x324f},
	Node{0xa4d0, 0xa62b},
	Node{0xa640, 0xa66e},
	Node{0xa673, 0xa673},
	Node{0xa67e, 0xa69d},
	Node{0xa6a0, 0xa6ef},
	Node{0xa6f2, 0xa6f7},
	Node{0xa700, 0xa7dc},
	Node{0xa7f1, 0xa801},
	Node{0xa803, 0xa805},
	Node{0xa807, 0xa80a},
	Node{0xa80c, 0xa822},
	Node{0xa828, 0xa82b},
	Node{0xa830, 0xa839},
	Node{0xa840, 0xa877},
	Node{0xa882, 0xa8b3},
	Node{0xa8ce, 0xa8d9},
	Node{0xa8f2, 0xa8fe},
	Node{0xa900, 0xa925},
	Node{0xa92e, 0xa946},
	Node{0xa95f, 0xa95f},
	Node{0xa984, 0xa9b2},
	Node{0xa9c1, 0xa9cd},
	Node{0xa9cf, 0xa9d9},
	Node{0xa9de, 0xa9e4},
	Node{0xa9e6, 0xa9fe},
	Node{0xaa00, 0xaa28},
	Node{0xaa40, 0xaa42},
	Node{0xaa44, 0xaa4b},
	Node{0xaa50, 0xaa59},
	Node{0xaa5c, 0xaa7a},
	Node{0xaa7e, 0xaaaf},
	Node{0xaab1, 0xaab1},
	Node{0xaab5, 0xaab6},
	Node{0xaab9, 0xaabd},
	Node{0xaac0, 0xaac0},
	Node{0xaac2, 0xaac2},
	Node{0xaadb, 0xaaea},
	Node{0xaaf0, 0xaaf4},
	Node{0xab01, 0xab06},
	Node{0xab09, 0xab0e},
	Node{0xab11, 0xab16},
	Node{0xab20, 0xab26},
	Node{0xab28, 0xab2e},
	Node{0xab30, 0xab6b},
	Node{0xab70, 0xabe2},
	Node{0xabeb, 0xabeb},
	Node{0xabf0, 0xabf9},
	Node{0xe000, 0xf8ff},
	Node{0xfb00, 0xfb06},
	Node{0xfb13, 0xfb17},
	Node{0xfb1d, 0xfb1d},
	Node{0xfb1f, 0xfb36},
	Node{0xfb38, 0xfb3c},
	Node{0xfb3e, 0xfb3e},
	Node{0xfb40, 0xfb41},
	Node{0xfb43, 0xfb44},
	Node{0xfb46, 0xfdcf},
	Node{0xfdf0, 0xfe0f},
	Node{0xfe70, 0xfe74},
	Node{0xfe76, 0xfefc},
	Node{0xff61, 0xffbe},
	Node{0xffc2, 0xffc7},
	Node{0xffca, 0xffcf},
	Node{0xffd2, 0xffd7},
	Node{0xffda, 0xffdc},
	Node{0xffe8, 0xffee},
	Node{0xfffc, 0xfffd},
	Node{0x10000, 0x1000b},
	Node{0x1000d, 0x10026},
	Node{0x10028, 0x1003a},
	Node{0x1003c, 0x1003d},
	Node{0x1003f, 0x1004d},
	Node{0x10050, 0x1005d},
	Node{0x10080, 0x100fa},
	Node{0x10100, 0x10102},
	Node{0x10107, 0x10133},
	Node{0x10137, 0x1018e},
	Node{0x10190, 0x1019c},
	Node{0x101a0, 0x101a0},
	Node{0x101d0, 0x101fc},
	Node{0x10280, 0x1029c},
	Node{0x102a0, 0x102d0},
	Node{0x102e1, 0x102fb},
	Node{0x10300, 0x10323},
	Node{0x1032d, 0x1034a},
	Node{0x10350, 0x10375},
	Node{0x10380, 0x1039d},
	Node{0x1039f, 0x103c3},
	Node{0x103c8, 0x103d5},
	Node{0x10400, 0x1049d},
	Node{0x104a0, 0x104a9},
	Node{0x104b0, 0x104d3},
	Node{0x104d8, 0x104fb},
	Node{0x10500, 0x10527},
	Node{0x10530, 0x10563},
	Node{0x1056f, 0x1057a},
	Node{0x1057c, 0x1058a},
	Node{0x1058c, 0x10592},
	Node{0x10594, 0x10595},
	Node{0x10597, 0x105a1},
	Node{0x105a3, 0x105b1},
	Node{0x105b3, 0x105b9},
	Node{0x105bb, 0x105bc},
	Node{0x105c0, 0x105f3},
	Node{0x10600, 0x10736},
	Node{0x10740, 0x10755},
	Node{0x10760, 0x10767},
	Node{0x10780, 0x10785},
	Node{0x10787, 0x107b0},
	Node{0x107b2, 0x107ba},
	Node{0x10800, 0x10805},
	Node{0x10808, 0x10808},
	Node{0x1080a, 0x10835},
	Node{0x10837, 0x10838},
	Node{0x1083c, 0x1083c},
	Node{0x1083f, 0x10855},
	Node{0x10857, 0x1089e},
	Node{0x108a7, 0x108af},
	Node{0x108e0, 0x108f2},
	Node{0x108f4, 0x108f5},
	Node{0x108fb, 0x1091b},
	Node{0x1091f, 0x10939},
	Node{0x1093f, 0x10959},
	Node{0x10980, 0x109b7},
	Node{0x109bc, 0x109cf},
	Node{0x109d2, 0x10a00},
	Node{0x10a10, 0x10a13},
	Node{0x10a15, 0x10a17},
	Node{0x10a19, 0x10a35},
	Node{0x10a40, 0x10a48},
	Node{0x10a50, 0x10a58},
	Node{0x10a60, 0x10a9f},
	Node{0x10ac0, 0x10ae4},
	Node{0x10aeb, 0x10af6},
	Node{0x10b00, 0x10b35},
	Node{0x10b39, 0x10b55},
	Node{0x10b58, 0x10b72},
	Node{0x10b78, 0x10b91},
	Node{0x10b99, 0x10b9c},
	Node{0x10ba9, 0x10baf},
	Node{0x10c00, 0x10c48},
	Node{0x10c80, 0x10cb2},
	Node{0x10cc0, 0x10cf2},
	Node{0x10cfa, 0x10d23},
	Node{0x10d30, 0x10d39},
	Node{0x10d40, 0x10d65},
	Node{0x10d6e, 0x10d85},
	Node{0x10d8e, 0x10d8f},
	Node{0x10e60, 0x10e7e},
	Node{0x10e80, 0x10ea9},
	Node{0x10ead, 0x10ead},
	Node{0x10eb0, 0x10eb1},
	Node{0x10ec2, 0x10ec7},
	Node{0x10ed0, 0x10ed8},
	Node{0x10f00, 0x10f27},
	Node{0x10f30, 0x10f45},
	Node{0x10f51, 0x10f59},
	Node{0x10f70, 0x10f81},
	Node{0x10f86, 0x10f89},
	Node{0x10fb0, 0x10fcb},
	Node{0x10fe0, 0x10ff6},
	Node{0x11003, 0x11037},
	Node{0x11047, 0x1104d},
	Node{0x11052, 0x1106f},
	Node{0x11071, 0x11072},
	Node{0x11075, 0x11075},
	Node{0x11083, 0x110af},
	Node{0x110bb, 0x110bc},
	Node{0x110be, 0x110c1},
	Node{0x110d0, 0x110e8},
	Node{0x110f0, 0x110f9},
	Node{0x11103, 0x11126},
	Node{0x11136, 0x11144},
	Node{0x11147, 0x11147},
	Node{0x11150, 0x11172},
	Node{0x11174, 0x11176},
	Node{0x11183, 0x111b2},
	Node{0x111c1, 0x111c8},
	Node{0x111cd, 0x111cd},
	Node{0x111d0, 0x111df},
	Node{0x111e1, 0x111f4},
	Node{0x11200, 0x11211},
	Node{0x11213, 0x1122b},
	Node{0x11238, 0x1123d},
	Node{0x1123f, 0x11240},
	Node{0x11280, 0x11286},
	Node{0x11288, 0x11288},
	Node{0x1128a, 0x1128d},
	Node{0x1128f, 0x1129d},
	Node{0x1129f, 0x112a9},
	Node{0x112b0, 0x112de},
	Node{0x112f0, 0x112f9},
	Node{0x11305, 0x1130c},
	Node{0x1130f, 0x11310},
	Node{0x11313, 0x11328},
	Node{0x1132a, 0x11330},
	Node{0x11332, 0x11333},
	Node{0x11335, 0x11339},
	Node{0x1133d, 0x1133d},
	Node{0x11350, 0x11350},
	Node{0x1135d, 0x11361},
	Node{0x11380, 0x11389},
	Node{0x1138b, 0x1138b},
	Node{0x1138e, 0x1138e},
	Node{0x11390, 0x113b5},
	Node{0x113b7, 0x113b7},
	Node{0x113d1, 0x113d1},
	Node{0x113d3, 0x113d5},
	Node{0x113d7, 0x113d8},
	Node{0x11400, 0x11434},
	Node{0x11447, 0x1145b},
	Node{0x1145d, 0x1145d},
	Node{0x1145f, 0x11461},
	Node{0x11480, 0x114af},
	Node{0x114c4, 0x114c7},
	Node{0x114d0, 0x114d9},
	Node{0x11580, 0x115ae},
	Node{0x115c1, 0x115db},
	Node{0x11600, 0x1162f},
	Node{0x11641, 0x11644},
	Node{0x11650, 0x11659},
	Node{0x11660, 0x1166c},
	Node{0x11680, 0x116aa},
	Node{0x116b8, 0x116b9},
	Node{0x116c0, 0x116c9},
	Node{0x116d0, 0x116e3},
	Node{0x11700, 0x1171a},
	Node{0x11730, 0x11746},
	Node{0x11800, 0x1182b},
	Node{0x1183b, 0x1183b},
	Node{0x118a0, 0x118f2},
	Node{0x118ff, 0x11906},
	Node{0x11909, 0x11909},
	Node{0x1190c, 0x11913},
	Node{0x11915, 0x11916},
	Node{0x11918, 0x1192f},
	Node{0x1193f, 0x1193f},
	Node{0x11941, 0x11941},
	Node{0x11944, 0x11946},
	Node{0x11950, 0x11959},
	Node{0x119a0, 0x119a7},
	Node{0x119aa, 0x119d0},
	Node{0x119e1, 0x119e3},
	Node{0x11a00, 0x11a00},
	Node{0x11a0b, 0x11a32},
	Node{0x11a3a, 0x11a3a},
	Node{0x11a3f, 0x11a46},
	Node{0x11a50, 0x11a50},
	Node{0x11a5c, 0x11a89},
	Node{0x11a9a, 0x11aa2},
	Node{0x11ab0, 0x11af8},
	Node{0x11b00, 0x11b09},
	Node{0x11bc0, 0x11be1},
	Node{0x11bf0, 0x11bf9},
	Node{0x11c00, 0x11c08},
	Node{0x11c0a, 0x11c2e},
	Node{0x11c40, 0x11c45},
	Node{0x11c50, 0x11c6c},
	Node{0x11c70, 0x11c8f},
	Node{0x11d00, 0x11d06},
	Node{0x11d08, 0x11d09},
	Node{0x11d0b, 0x11d30},
	Node{0x11d46, 0x11d46},
	Node{0x11d50, 0x11d59},
	Node{0x11d60, 0x11d65},
	Node{0x11d67, 0x11d68},
	Node{0x11d6a, 0x11d89},
	Node{0x11d98, 0x11d98},
	Node{0x11da0, 0x11da9},
	Node{0x11db0, 0x11ddb},
	Node{0x11de0, 0x11de9},
	Node{0x11ee0, 0x11ef2},
	Node{0x11ef7, 0x11ef8},
	Node{0x11f02, 0x11f02},
	Node{0x11f04, 0x11f10},
	Node{0x11f12, 0x11f33},
	Node{0x11f43, 0x11f59},
	Node{0x11fb0, 0x11fb0},
	Node{0x11fc0, 0x11ff1},
	Node{0x11fff, 0x12399},
	Node{0x12400, 0x1246e},
	Node{0x12470, 0x12474},
	Node{0x12480, 0x12543},
	Node{0x12f90, 0x12ff2},
	Node{0x13000, 0x1342f},
	Node{0x13441, 0x13446},
	Node{0x13460, 0x143fa},
	Node{0x14400, 0x14646},
	Node{0x16100, 0x1611d},
	Node{0x16130, 0x16139},
	Node{0x16800, 0x16a38},
	Node{0x16a40, 0x16a5e},
	Node{0x16a60, 0x16a69},
	Node{0x16a6e, 0x16abe},
	Node{0x16ac0, 0x16ac9},
	Node{0x16ad0, 0x16aed},
	Node{0x16af5, 0x16af5},
	Node{0x16b00, 0x16b2f},
	Node{0x16b37, 0x16b45},
	Node{0x16b50, 0x16b59},
	Node{0x16b5b, 0x16b61},
	Node{0x16b63, 0x16b77},
	Node{0x16b7d, 0x16b8f},
	Node{0x16d40, 0x16d79},
	Node{0x16e40, 0x16e9a},
	Node{0x16ea0, 0x16eb8},
	Node{0x16ebb, 0x16ed3},
	Node{0x16f00, 0x16f4a},
	Node{0x16f50, 0x16f50},
	Node{0x16f93, 0x16f9f},
	Node{0x1bc00, 0x1bc6a},
	Node{0x1bc70, 0x1bc7c},
	Node{0x1bc80, 0x1bc88},
	Node{0x1bc90, 0x1bc99},
	Node{0x1bc9c, 0x1bc9c},
	Node{0x1bc9f, 0x1bc9f},
	Node{0x1cc00, 0x1ccfc},
	Node{0x1cd00, 0x1ceb3},
	Node{0x1ceba, 0x1ced0},
	Node{0x1cee0, 0x1cef0},
	Node{0x1cf50, 0x1cfc3},
	Node{0x1d000, 0x1d0f5},
	Node{0x1d100, 0x1d126},
	Node{0x1d129, 0x1d164},
	Node{0x1d16a, 0x1d16c},
	Node{0x1d183, 0x1d184},
	Node{0x1d18c, 0x1d1a9},
	Node{0x1d1ae, 0x1d1ea},
	Node{0x1d200, 0x1d241},
	Node{0x1d245, 0x1d245},
	Node{0x1d2c0, 0x1d2d3},
	Node{0x1d2e0, 0x1d2f3},
	Node{0x1d377, 0x1d378},
	Node{0x1d400, 0x1d454},
	Node{0x1d456, 0x1d49c},
	Node{0x1d49e, 0x1d49f},
	Node{0x1d4a2, 0x1d4a2},
	Node{0x1d4a5, 0x1d4a6},
	Node{0x1d4a9, 0x1d4ac},
	Node{0x1d4ae, 0x1d4b9},
	Node{0x1d4bb, 0x1d4bb},
	Node{0x1d4bd, 0x1d4c3},
	Node{0x1d4c5, 0x1d505},
	Node{0x1d507, 0x1d50a},
	Node{0x1d50d, 0x1d514},
	Node{0x1d516, 0x1d51c},
	Node{0x1d51e, 0x1d539},
	Node{0x1d53b, 0x1d53e},
	Node{0x1d540, 0x1d544},
	Node{0x1d546, 0x1d546},
	Node{0x1d54a, 0x1d550},
	Node{0x1d552, 0x1d6a5},
	Node{0x1d6a8, 0x1d7cb},
	Node{0x1d7ce, 0x1d9ff},
	Node{0x1da37, 0x1da3a},
	Node{0x1da6d, 0x1da74},
	Node{0x1da76, 0x1da83},
	Node{0x1da85, 0x1da8b},
	Node{0x1df00, 0x1df1e},
	Node{0x1df25, 0x1df2a},
	Node{0x1e030, 0x1e06d},
	Node{0x1e100, 0x1e12c},
	Node{0x1e137, 0x1e13d},
	Node{0x1e140, 0x1e149},
	Node{0x1e14e, 0x1e14f},
	Node{0x1e290, 0x1e2ad},
	Node{0x1e2c0, 0x1e2eb},
	Node{0x1e2f0, 0x1e2f9},
	Node{0x1e2ff, 0x1e2ff},
	Node{0x1e4d0, 0x1e4eb},
	Node{0x1e4f0, 0x1e4f9},
	Node{0x1e5d0, 0x1e5ed},
	Node{0x1e5f0, 0x1e5fa},
	Node{0x1e5ff, 0x1e5ff},
	Node{0x1e6c0, 0x1e6de},
	Node{0x1e6e0, 0x1e6e2},
	Node{0x1e6e4, 0x1e6e5},
	Node{0x1e6e7, 0x1e6ed},
	Node{0x1e6f0, 0x1e6f4},
	Node{0x1e6fe, 0x1e6ff},
	Node{0x1e7e0, 0x1e7e6},
	Node{0x1e7e8, 0x1e7eb},
	Node{0x1e7ed, 0x1e7ee},
	Node{0x1e7f0, 0x1e7fe},
	Node{0x1e800, 0x1e8c4},
	Node{0x1e8c7, 0x1e8cf},
	Node{0x1e900, 0x1e943},
	Node{0x1e94b, 0x1e94b},
	Node{0x1e950, 0x1e959},
	Node{0x1e95e, 0x1e95f},
	Node{0x1ec71, 0x1ecb4},
	Node{0x1ed01, 0x1ed3d},
	Node{0x1ee00, 0x1ee03},
	Node{0x1ee05, 0x1ee1f},
	Node{0x1ee21, 0x1ee22},
	Node{0x1ee24, 0x1ee24},
	Node{0x1ee27, 0x1ee27},
	Node{0x1ee29, 0x1ee32},
	Node{0x1ee34, 0x1ee37},
	Node{0x1ee39, 0x1ee39},
	Node{0x1ee3b, 0x1ee3b},
	Node{0x1ee42, 0x1ee42},
	Node{0x1ee47, 0x1ee47},
	Node{0x1ee49, 0x1ee49},
	Node{0x1ee4b, 0x1ee4b},
	Node{0x1ee4d, 0x1ee4f},
	Node{0x1ee51, 0x1ee52},
	Node{0x1ee54, 0x1ee54},
	Node{0x1ee57, 0x1ee57},
	Node{0x1ee59, 0x1ee59},
	Node{0x1ee5b, 0x1ee5b},
	Node{0x1ee5d, 0x1ee5d},
	Node{0x1ee5f, 0x1ee5f},
	Node{0x1ee61, 0x1ee62},
	Node{0x1ee64, 0x1ee64},
	Node{0x1ee67, 0x1ee6a},
	Node{0x1ee6c, 0x1ee72},
	Node{0x1ee74, 0x1ee77},
	Node{0x1ee79, 0x1ee7c},
	Node{0x1ee7e, 0x1ee7e},
	Node{0x1ee80, 0x1ee89},
	Node{0x1ee8b, 0x1ee9b},
	Node{0x1eea1, 0x1eea3},
	Node{0x1eea5, 0x1eea9},
	Node{0x1eeab, 0x1eebb},
	Node{0x1eef0, 0x1eef1},
	Node{0x1f000, 0x1f003},
	Node{0x1f005, 0x1f02b},
	Node{0x1f030, 0x1f093},
	Node{0x1f0a0, 0x1f0ae},
	Node{0x1f0b1, 0x1f0bf},
	Node{0x1f0c1, 0x1f0ce},
	Node{0x1f0d1, 0x1f0f5},
	Node{0x1f100, 0x1f18d},
	Node{0x1f18f, 0x1f190},
	Node{0x1f19b, 0x1f1ad},
	Node{0x1f1e6, 0x1f1ff},
	Node{0x1f321, 0x1f32c},
	Node{0x1f336, 0x1f336},
	Node{0x1f37d, 0x1f37d},
	Node{0x1f394, 0x1f39f},
	Node{0x1f3cb, 0x1f3ce},
	Node{0x1f3d4, 0x1f3df},
	Node{0x1f3f1, 0x1f3f3},
	Node{0x1f3f5, 0x1f3f7},
	Node{0x1f43f, 0x1f43f},
	Node{0x1f441, 0x1f441},
	Node{0x1f4fd, 0x1f4fe},
	Node{0x1f53e, 0x1f54a},
	Node{0x1f54f, 0x1f54f},
	Node{0x1f568, 0x1f579},
	Node{0x1f57b, 0x1f594},
	Node{0x1f597, 0x1f5a3},
	Node{0x1f5a5, 0x1f5fa},
	Node{0x1f650, 0x1f67f},
	Node{0x1f6c6, 0x1f6cb},
	Node{0x1f6cd, 0x1f6cf},
	Node{0x1f6d3, 0x1f6d4},
	Node{0x1f6e0, 0x1f6ea},
	Node{0x1f6f0, 0x1f6f3},
	Node{0x1f700, 0x1f7d9},
	Node{0x1f800, 0x1f80b},
	Node{0x1f810, 0x1f847},
	Node{0x1f850, 0x1f859},
	Node{0x1f860, 0x1f887},
	Node{0x1f890, 0x1f8ad},
	Node{0x1f8b0, 0x1f8bb},
	Node{0x1f8c0, 0x1f8c1},
	Node{0x1f8d0, 0x1f8d8},
	Node{0x1f900, 0x1f90b},
	Node{0x1f93b, 0x1f93b},
	Node{0x1f946, 0x1f946},
	Node{0x1fa00, 0x1fa57},
	Node{0x1fa60, 0x1fa6d},
	Node{0x1fb00, 0x1fb92},
	Node{0x1fb94, 0x1fbfa},
	Node{0xe0100, 0xe01ef},
	Node{0xf0000, 0xffffd},
	Node{0x100000, 0x10fffd},
};

inline constexpr std::array<Node, 123> kWidth2 = {
	Node{0x1100, 0x115f},
	Node{0x231a, 0x231b},
	Node{0x2329, 0x232a},
	Node{0x23e9, 0x23ec},
	Node{0x23f0, 0x23f0},
	Node{0x23f3, 0x23f3},
	Node{0x25fd, 0x25fe},
	Node{0x2614, 0x2615},
	Node{0x2630, 0x2637},
	Node{0x2648, 0x2653},
	Node{0x267f, 0x267f},
	Node{0x268a, 0x268f},
	Node{0x2693, 0x2693},
	Node{0x26a1, 0x26a1},
	Node{0x26aa, 0x26ab},
	Node{0x26bd, 0x26be},
	Node{0x26c4, 0x26c5},
	Node{0x26ce, 0x26ce},
	Node{0x26d4, 0x26d4},
	Node{0x26ea, 0x26ea},
	Node{0x26f2, 0x26f3},
	Node{0x26f5, 0x26f5},
	Node{0x26fa, 0x26fa},
	Node{0x26fd, 0x26fd},
	Node{0x2705, 0x2705},
	Node{0x270a, 0x270b},
	Node{0x2728, 0x2728},
	Node{0x274c, 0x274c},
	Node{0x274e, 0x274e},
	Node{0x2753, 0x2755},
	Node{0x2757, 0x2757},
	Node{0x2795, 0x2797},
	Node{0x27b0, 0x27b0},
	Node{0x27bf, 0x27bf},
	Node{0x2b1b, 0x2b1c},
	Node{0x2b50, 0x2b50},
	Node{0x2b55, 0x2b55},
	Node{0x2e80, 0x2e99},
	Node{0x2e9b, 0x2ef3},
	Node{0x2f00, 0x2fd5},
	Node{0x2ff0, 0x303e},
	Node{0x3041, 0x3096},
	Node{0x3099, 0x30ff},
	Node{0x3105, 0x312f},
	Node{0x3131, 0x318e},
	Node{0x3190, 0x31e5},
	Node{0x31ef, 0x321e},
	Node{0x3220, 0x3247},
	Node{0x3250, 0xa48c},
	Node{0xa490, 0xa4c6},
	Node{0xa960, 0xa97c},
	Node{0xac00, 0xd7a3},
	Node{0xf900, 0xfaff},
	Node{0xfe10, 0xfe19},
	Node{0xfe30, 0xfe52},
	Node{0xfe54, 0xfe66},
	Node{0xfe68, 0xfe6b},
	Node{0xff01, 0xff60},
	Node{0xffe0, 0xffe6},
	Node{0x16fe0, 0x16fe4},
	Node{0x16ff0, 0x16ff6},
	Node{0x17000, 0x18cd5},
	Node{0x18cff, 0x18d1e},
	Node{0x18d80, 0x18df2},
	Node{0x1aff0, 0x1aff3},
	Node{0x1aff5, 0x1affb},
	Node{0x1affd, 0x1affe},
	Node{0x1b000, 0x1b122},
	Node{0x1b132, 0x1b132},
	Node{0x1b150, 0x1b152},
	Node{0x1b155, 0x1b155},
	Node{0x1b164, 0x1b167},
	Node{0x1b170, 0x1b2fb},
	Node{0x1d300, 0x1d356},
	Node{0x1d360, 0x1d376},
	Node{0x1f004, 0x1f004},
	Node{0x1f0cf, 0x1f0cf},
	Node{0x1f18e, 0x1f18e},
	Node{0x1f191, 0x1f19a},
	Node{0x1f200, 0x1f202},
	Node{0x1f210, 0x1f23b},
	Node{0x1f240, 0x1f248},
	Node{0x1f250, 0x1f251},
	Node{0x1f260, 0x1f265},
	Node{0x1f300, 0x1f320},
	Node{0x1f32d, 0x1f335},
	Node{0x1f337, 0x1f37c},
	Node{0x1f37e, 0x1f393},
	Node{0x1f3a0, 0x1f3ca},
	Node{0x1f3cf, 0x1f3d3},
	Node{0x1f3e0, 0x1f3f0},
	Node{0x1f3f4, 0x1f3f4},
	Node{0x1f3f8, 0x1f43e},
	Node{0x1f440, 0x1f440},
	Node{0x1f442, 0x1f4fc},
	Node{0x1f4ff, 0x1f53d},
	Node{0x1f54b, 0x1f54e},
	Node{0x1f550, 0x1f567},
	Node{0x1f57a, 0x1f57a},
	Node{0x1f595, 0x1f596},
	Node{0x1f5a4, 0x1f5a4},
	Node{0x1f5fb, 0x1f64f},
	Node{0x1f680, 0x1f6c5},
	Node{0x1f6cc, 0x1f6cc},
	Node{0x1f6d0, 0x1f6d2},
	Node{0x1f6d5, 0x1f6d8},
	Node{0x1f6dc, 0x1f6df},
	Node{0x1f6eb, 0x1f6ec},
	Node{0x1f6f4, 0x1f6fc},
	Node{0x1f7e0, 0x1f7eb},
	Node{0x1f7f0, 0x1f7f0},
	Node{0x1f90c, 0x1f93a},
	Node{0x1f93c, 0x1f945},
	Node{0x1f947, 0x1f9ff},
	Node{0x1fa70, 0x1fa7c},
	Node{0x1fa80, 0x1fa8a},
	Node{0x1fa8e, 0x1fac6},
	Node{0x1fac8, 0x1fac8},
	Node{0x1facd, 0x1fadd},
	Node{0x1fadf, 0x1faea},
	Node{0x1faef, 0x1faf8},
	Node{0x20000, 0x2fffd},
	Node{0x30000, 0x3fffd},
};

inline bool IsInRanges(Node const* ranges, u32 size, c32 c) {
	auto iter = std::lower_bound(ranges, ranges + size, c, [](Node const& v, c32 c) { return v.high < c; });
	return (iter != (ranges + size)) && (c >= iter->low);
}

}

namespace charwidth {

inline u32 CharWidth(c32 c) {
	if (details::IsInRanges(details::kWidth1.data(), details::kWidth1.size(), c)) return 1;
	if (details::IsInRanges(details::kWidth2.data(), details::kWidth2.size(), c)) return 2;
	return 0;
}

}