/*
	Copyright (c) 2025 didarpin
	SPDX-License-Identifier: MIT
*/

#pragma once

#include "def.h"
#include "type_c90.h"

void _CW_EnsureIntSize4(void) {
	static char var[sizeof(int) == 4 ? 1 : -1];
	(void)var;
}

typedef struct _CW_Node {
	cw_u32 low;
	cw_u32 high;
} _CW_Node;
{% for version in versions %}

#if CW_ENABLE_{{ version | VersionV }} == 1
#include "{{ version }}/c90.h"
#endif
{% endfor %}

#if defined(__GNUC__) || defined(__clang__)
    #define UNUSED __attribute__((unused))
#else
	#define UNUSED
#endif

static CW_Version _cw_version = CW_V_None;

UNUSED static void CW_SetVersion(CW_Version version) {
	_cw_version = version;
}

UNUSED void CW_TreatAmbiguousAsWide() {
{% for version in versions %}
#if CW_ENABLE_{{ version | VersionV }} == 1
	_CW_{{ version | VersionV }}_TreatAmbiguousAsWide();
#endif
{% endfor %}
}

UNUSED void CW_TreatAmbiguousAsNarrow() {
{% for version in versions %}
#if CW_ENABLE_{{ version | VersionV }} == 1
	_CW_{{ version | VersionV }}_TreatAmbiguousAsNarrow();
#endif
{% endfor %}
}

UNUSED static int CW_CharWidth(cw_u32 c) {
	switch (_cw_version) {
{% for version in versions %}
#if CW_ENABLE_{{ version | VersionV }} == 1
	case CW_V_{{ version | VersionV }}: return _CW_{{ version | VersionV }}_CharWidth(c);
#endif
{% endfor %}
	default: return -1;
	}
}
