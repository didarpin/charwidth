/*
	Copyright (c) 2025 didarpin
	SPDX-License-Identifier: MIT
*/

#pragma once

namespace charwidth::v_{{ version | VersionV }} {

using Node = details::Node;

inline constexpr Node kWidth1[{{ width_1 | length }}] = {
	{% for n in width_1 %}
	{{ "{" }}{{ "0x%x" | format(n[0]) }}, {{ "0x%x" | format(n[1]) }}{{ "}" }},
	{% endfor %}
};

inline constexpr Node kWidth2[{{ width_2 | length }}] = {
	{% for n in width_2 %}
	{{ "{" }}{{ "0x%x" | format(n[0]) }}, {{ "0x%x" | format(n[1]) }}{{ "}" }},
	{% endfor %}
};

inline constexpr Node kWidthAmbiguous[{{ width_ambiguous | length }}] = {
	{% for n in width_ambiguous %}
	{{ "{" }}{{ "0x%x" | format(n[0]) }}, {{ "0x%x" | format(n[1]) }}{{ "}" }},
	{% endfor %}
};

inline int ambiguous_width = 1;

inline bool IsInRanges(Node const* ranges, size_t size, u32 c) {
	auto iter = std::lower_bound(ranges, ranges + size, c, [](Node const& v, u32 c) { return v.high < c; });
	return (iter != (ranges + size)) && (c >= iter->low);
}

inline void TreatAmbiguousAsWide() {
	ambiguous_width = 2;
}

inline void TreatAmbiguousAsNarrow() {
	ambiguous_width = 1;
}

inline int CharWidth(u32 c) {
	if (IsInRanges(kWidth1, {{ width_1 | length }}, c)) return 1;
	if (IsInRanges(kWidth2, {{ width_2 | length }}, c)) return 2;
	if (IsInRanges(kWidthAmbiguous, {{ width_ambiguous | length }}, c)) return ambiguous_width;
	return (c <= 0x10ffff) ? 0 : -1;
}

}
